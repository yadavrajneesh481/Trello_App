{"ast":null,"code":"import { ApiMockResponse } from \"../ApiMockData/dummyData\";\nconst LocalStorageKeyName = \"kanban-boards\";\n//Data Layer\nexport class BoardAPI {\n  async fetchBoardList() {\n    const apiData = ApiMockResponse;\n    let BoardList = [];\n    //first check local storage if local storage is empty then add api mock data as seed\n    if (localStorage.getItem(LocalStorageKeyName)) {\n      var _localStorage$getItem;\n      const localStorageData = JSON.parse((_localStorage$getItem = localStorage.getItem(LocalStorageKeyName)) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"\");\n      BoardList = [...localStorageData];\n    } else {\n      BoardList = [...apiData];\n      updateLocalStorageBoards(BoardList);\n    }\n    return BoardList;\n    //TODO:integrate API module when got API from backend team :)\n    /*\n      private readonly api = new Api();//it will have all Restful verbs functions\n      return axios.get(`ENDPOINT_GOES_HERE`)\n      .then((res: { data: any; }) => {\n        return res.data;\n      });\n      */\n  }\n} //BoardAPI Class End\n\n//Business Layer\nexport async function fetchBoardList() {\n  const api = new BoardAPI();\n  return api.fetchBoardList();\n}\nexport function updateLocalStorageBoards(boards) {\n  localStorage.setItem(LocalStorageKeyName, JSON.stringify(boards));\n}","map":{"version":3,"names":["ApiMockResponse","LocalStorageKeyName","BoardAPI","fetchBoardList","apiData","BoardList","localStorage","getItem","_localStorage$getItem","localStorageData","JSON","parse","updateLocalStorageBoards","api","boards","setItem","stringify"],"sources":["C:/Users/ADMIN/Downloads/Trello_App/Trello_App/src/Helper/APILayers.ts"],"sourcesContent":["import { ApiMockResponse } from \"../ApiMockData/dummyData\";\nimport { IBoard } from \"../Interfaces/Kanban\";\n\nconst LocalStorageKeyName = \"kanban-boards\";\n//Data Layer\nexport class BoardAPI {\n  async fetchBoardList(): Promise<IBoard[]> {\n    const apiData: IBoard[] = ApiMockResponse;\n    let BoardList: IBoard[] = [];\n    //first check local storage if local storage is empty then add api mock data as seed\n    if (localStorage.getItem(LocalStorageKeyName)) {\n      const localStorageData: IBoard[] = JSON.parse(\n        localStorage.getItem(LocalStorageKeyName) ?? \"\",\n      );\n      BoardList = [...localStorageData];\n    } else {\n      BoardList = [...apiData];\n      updateLocalStorageBoards(BoardList);\n    }\n\n    return BoardList;\n    //TODO:integrate API module when got API from backend team :)\n    /*\n      private readonly api = new Api();//it will have all Restful verbs functions\n      return axios.get(`ENDPOINT_GOES_HERE`)\n      .then((res: { data: any; }) => {\n        return res.data;\n      });\n      */\n  }\n} //BoardAPI Class End\n\n//Business Layer\nexport async function fetchBoardList(): Promise<IBoard[]> {\n  const api = new BoardAPI();\n  return api.fetchBoardList();\n}\nexport function updateLocalStorageBoards(boards: IBoard[]) {\n  localStorage.setItem(LocalStorageKeyName, JSON.stringify(boards));\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,0BAA0B;AAG1D,MAAMC,mBAAmB,GAAG,eAAe;AAC3C;AACA,OAAO,MAAMC,QAAQ,CAAC;EACpB,MAAMC,cAAcA,CAAA,EAAsB;IACxC,MAAMC,OAAiB,GAAGJ,eAAe;IACzC,IAAIK,SAAmB,GAAG,EAAE;IAC5B;IACA,IAAIC,YAAY,CAACC,OAAO,CAACN,mBAAmB,CAAC,EAAE;MAAA,IAAAO,qBAAA;MAC7C,MAAMC,gBAA0B,GAAGC,IAAI,CAACC,KAAK,EAAAH,qBAAA,GAC3CF,YAAY,CAACC,OAAO,CAACN,mBAAmB,CAAC,cAAAO,qBAAA,cAAAA,qBAAA,GAAI,EAC/C,CAAC;MACDH,SAAS,GAAG,CAAC,GAAGI,gBAAgB,CAAC;IACnC,CAAC,MAAM;MACLJ,SAAS,GAAG,CAAC,GAAGD,OAAO,CAAC;MACxBQ,wBAAwB,CAACP,SAAS,CAAC;IACrC;IAEA,OAAOA,SAAS;IAChB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,eAAeF,cAAcA,CAAA,EAAsB;EACxD,MAAMU,GAAG,GAAG,IAAIX,QAAQ,CAAC,CAAC;EAC1B,OAAOW,GAAG,CAACV,cAAc,CAAC,CAAC;AAC7B;AACA,OAAO,SAASS,wBAAwBA,CAACE,MAAgB,EAAE;EACzDR,YAAY,CAACS,OAAO,CAACd,mBAAmB,EAAES,IAAI,CAACM,SAAS,CAACF,MAAM,CAAC,CAAC;AACnE"},"metadata":{},"sourceType":"module","externalDependencies":[]}